{"ast":null,"code":"import AppConfig from \"../config/appConfig\";\nexport default class TripApi {\n  /**\n   *\n   * @param {ObjectMember} locationState\n   */\n  getAllTripsData(locationState) {\n    let url = \"\".concat(AppConfig.API_URL, \"/\").concat(locationState.userId);\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + locationState.token\n      }\n    }).then(res => {\n      if (res.ok === true) {\n        return res.json();\n      } else {\n        return Promise.resolve([]);\n      }\n    });\n  }\n\n  delTripData(locationState, trip) {\n    console.log('locationstate', locationState);\n    let url = \"\\\"https://fototripr.com/api/v1/Trips/\\\"\".concat(trip.id);\n    return fetch(url, {\n      method: 'DELETE',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + locationState.token\n      }\n    }).then(res => {\n      if (res.ok === true) {\n        return res.json();\n      } else {\n        return Promise.resolve([]);\n      }\n    });\n  }\n\n  repTripData(locationState, trip) {\n    debugger;\n    console.log(locationState);\n    console.log(trip);\n    const isLoggedIn = locationState.isLoggedIn,\n          token = locationState.token,\n          userId = locationState.userId;\n    let url = \"https://fototripr.com/api/v1/Trips\";\n    return fetch(url, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + locationState.token\n      },\n      body: JSON.stringify({\n        isLoggedIn: isLoggedIn,\n        userId: userId,\n        token: token,\n        trip: trip\n      })\n    }).then(res => {\n      if (res.ok === true) {\n        return res.json();\n      } else {\n        return Promise.resolve([]);\n      }\n    });\n  }\n\n  handleChange(e, id, locationState) {\n    const isChecked = e.target.checked;\n    let active;\n\n    if (isChecked) {\n      active = \"true\";\n    } else {\n      active = \"false\";\n    }\n\n    const isLoggedIn = locationState.isLoggedIn,\n          token = locationState.token,\n          userId = locationState.userId;\n    let url = \"\\\"https://fototripr.com/api/v1/Trips/\\\"\".concat(id);\n    return fetch(url, {\n      method: 'PUT',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n        Authorization: 'Bearer ' + locationState.token\n      },\n      body: JSON.stringify({\n        isLoggedIn: isLoggedIn,\n        userId: userId,\n        active: active\n      })\n    }).then(res => {\n      if (res.ok === true) {\n        return res.json();\n      } else {\n        return Promise.resolve([]);\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["E:\\work\\project4.0\\src\\client\\api\\TripApi.js"],"names":["AppConfig","TripApi","getAllTripsData","locationState","url","API_URL","userId","fetch","method","headers","Accept","Authorization","token","then","res","ok","json","Promise","resolve","delTripData","trip","console","log","id","repTripData","isLoggedIn","body","JSON","stringify","handleChange","e","isChecked","target","checked","active"],"mappings":"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","sourcesContent":["import AppConfig from \"../config/appConfig\";\n\nexport default class TripApi {\n    /**\n     *\n     * @param {ObjectMember} locationState\n     */\n    getAllTripsData(locationState) {\n        let url = `${AppConfig.API_URL}/${locationState.userId}`;\n\n        return fetch(url, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + locationState.token\n            }\n        }).then(res => {\n            if (res.ok === true) {\n                return res.json();\n            } else {\n                return Promise.resolve([]);\n            }\n        });\n    }\n\n    delTripData(locationState,trip) {\n        console.log('locationstate', locationState);\n        let url = `\"https://fototripr.com/api/v1/Trips/\"${trip.id}`;\n\n        return fetch(url, {\n            method: 'DELETE',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + locationState.token\n            }\n        }).then(res => {\n            if (res.ok === true) {\n                return res.json();\n            } else {\n                return Promise.resolve([]);\n            }\n        });\n    }\n    repTripData(locationState, trip) {\n\n        debugger;\n        console.log(locationState);\n        console.log(trip);\n\n        const { isLoggedIn, token, userId } = locationState;\n        let url = \"https://fototripr.com/api/v1/Trips\";\n\n        return fetch(url, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + locationState.token\n            },\n            body: JSON.stringify({\n                isLoggedIn: isLoggedIn,\n                userId: userId,\n                token: token,\n                trip: trip\n              })\n        }).then(res => {\n            if (res.ok === true) {\n                return res.json();\n            } else {\n                return Promise.resolve([]);\n            }\n        });\n    }\n    handleChange(e, id, locationState){\n        const isChecked = e.target.checked;\n        let active;\n        if(isChecked){\n            active = \"true\";\n        } else{\n            active = \"false\";\n        }\n\n        const { isLoggedIn, token, userId } = locationState;\n        let url = `\"https://fototripr.com/api/v1/Trips/\"${id}`;\n\n        return fetch(url, {\n            method: 'PUT',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                Authorization: 'Bearer ' + locationState.token\n            },\n            body: JSON.stringify({\n                isLoggedIn: isLoggedIn,\n                userId: userId,\n                active:active\n              })\n        }).then(res => {\n            if (res.ok === true) {\n                return res.json();\n            } else {\n                return Promise.resolve([]);\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}